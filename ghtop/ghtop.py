# AUTOGENERATED! DO NOT EDIT! File to edit: 00_ghtop.ipynb (unless otherwise specified).

__all__ = ['exit', 'get_token', 'fetch_events', 'read_json_log', 'print_event', 'write_logs', 'tail_events',
           'watch_users', 'push_to_log', 'release_to_log', 'str_clean', 'quad_logs', 'simple']

# Cell
import time, datetime, pytz, sys, signal, shutil, os, json, urllib.request
import enlighten, emoji, blessed, requests, webbrowser
from .dashing import *
from urllib.parse import parse_qs

from collections import defaultdict

from fastcore.utils import *
from ghapi.all import *

# Cell
def exit(msg):
    print(msg, file=sys.stderr)
    sys.exit()

# Cell
def get_token():
    path = Path.home()/".ghtop_token"
    if path.is_file():
        try: return path.read_text().strip()
        except: exit("Error reading token")

    token = github_auth_device()
    path.write_text(token)
    return token

# Cell
def fetch_events(): return api.activity.list_public_events(per_page=100)

# Cell
def read_json_log():
    try: return logfile.read_json()
    except FileNotFoundError: return []

# Cell
def print_event(e, commits_counter):
    if e.id in printed_event_ids: return
    printed_event_ids[e.id] = 1
    login,repo = e.actor.login,e.repo.name
    # Don't print bot activity (there is a lot!)
    if "bot" in login or "b0t" in login: return

    if e.type == "ReleaseEvent": show(term.firebrick3(f':rocket: {login} released {e.payload.release.tag_name} of {repo}'))
    elif e.type in ("PublicEvent","ForkEvent","CreateEvent","MemberEvent"): return
    elif e.type == "IssuesEvent":
        action,issue = e.payload.action,e.payload.issue
        if action == 'closed':
            show(f':star: {login} closed issue # {issue.number} {_repo(r)} {_title(issue)}')
        elif action == 'opened':
            show(f':closed_mailbox_with_raised_flag: {login} opened {issue_(issue)} {_repo(r)} {_title(issue)}')
    elif e.type == "IssueCommentEvent":
        issue = e.payload.issue
        show(term.white(f':speech_balloon: {login} commented on {issue_(issue)} {_repo(r)} {_title(issue)}'))
    elif e.type == "PushEvent":
        for c in e.payload.commits: commits_counter.update()
    elif e.type == "PullRequestEvent":
        pr_emoji,pr_color = ("white_heavy_check_mark",term.green) if e.payload.action == "closed" else ("sparkles",term.yellow)
        show(pr_color(f':{pr_emoji}: {login} {e.payload.action} a pull request {_repo(repo,20)} {_title(e.payload.pull_request)}'))
    elif e.type == "SecurityAdvisoryEvent": return print(term.blink("SECURITY ADVISORY"))

# Cell
def write_logs(events):
    Path("tmp.log").write_text(json.dumps(events, indent=2))
    shutil.move("tmp.log", logfile)

def tail_events():
    manager = enlighten.get_manager()
    commits = manager.counter(desc='Commits', unit='commits', color='green')
    while True:
        events = fetch_events()
        log = read_json_log(logfile)
        combined = sorted(log + events, key=lambda x: int(x["id"]))
        write_logs(combined)
        for x in combined: print_event(x, commits)
        time.sleep(0.2)

# Cell
def watch_users():
    users = {}
    users_events = {}
    while True:
        events = fetch_events()
        for x in events:
            login = x["actor"]["login"]
            if login in users: users[login] += 1
            else: users[login] = 1
            if login not in users_events: users_events[login] = {}
            if x['type'] not in users_events[login]: users_events[login][x['type']] = 1
            else: users_events[login][x['type']] += 1

        print (term.clear())
        print ("User".ljust(30), "Events".ljust(6), "PRs".ljust(5), "Issues".ljust(6), "Pushes".ljust(7))

        sorted_users = sorted(users.items(), key = lambda kv: (kv[1], kv[0]), reverse=True)
        for i in range(20):
            u = sorted_users[i]
            ue = users_events[u[0]]
            print(u[0].ljust(30), str(u[1]).ljust(6),
                (str(ue['PullRequestEvent']) if 'PullRequestEvent' in ue else '').ljust(5),
                (str(ue['IssuesEvent']) if 'IssuesEvent' in ue else '').ljust(6),
                (str(ue['PushEvent']) if 'PushEvent' in ue else '').ljust(7))
        time.sleep(1)

# Cell
def push_to_log(e):
    login,repo = e.actor.login,e.repo.name
    return "%s pushed %d commits to repo %s" % (login, len(e["payload"]["commits"]), repo)

# Cell
def release_to_log(e):
    login,repo = e.actor.login,e.repo.name
    tag = e["payload"]["release"]["tag_name"]
    return emoji.emojize(':rocket: ') + login + " released " + tag + " of " + repo

# Cell
def str_clean(s): return s[:95]

# Cell
def quad_logs():
    term = Terminal()
    term.enter_fullscreen()

    ui = HSplit(
            VSplit(
                Log(title='Issues', border_color = 2, color=7),
                Log(title='Commits', border_color = 2, color=3)
            ),
            VSplit(
                Log(title='Pull Requests', border_color = 2, color=4),
                Log(title='Releases', border_color = 2, color=5)
            ),
        )

    issues = ui.items[0].items[0]
    commits = ui.items[0].items[1]
    prs = ui.items[1].items[0]
    releases = ui.items[1].items[1]

    issues.append(" ")
    commits.append(" ")
    prs.append(" ")
    releases.append(" ")

    while True:
        events = fetch_events()
        for x in events:
            t = x["type"]
            if t == 'PushEvent': commits.append(str_clean(push_to_log(x)))
            elif t == 'IssuesEvent' or t == 'IssueCommentEvent': issues.append(str_clean(issue_to_log(x)))
            elif t == 'PullRequestEvent': prs.append(str_clean(pr_to_log(x)))
            elif t == 'ReleaseEvent': releases.append(str_clean(release_to_log(x)))
        ui.display()
        time.sleep(0.1)

# Cell
def simple():
    while True:
        events = fetch_events()
        for x in events:
            print("%s %s %s" % (x["actor"]["login"], x["type"], x["repo"]["name"]))